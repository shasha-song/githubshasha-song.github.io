<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>comment</title>
    <url>/2021/03/03/comment/</url>
    <content><![CDATA[<p>评论来此集合，测试评论功能贴,要登录才能评论！！</p>
]]></content>
      <categories>
        <category>测试</category>
        <category>评论功能</category>
      </categories>
      <tags>
        <tag>测试</tag>
        <tag>评论</tag>
      </tags>
  </entry>
  <entry>
    <title>项目过程中遇到的报错问题解决</title>
    <url>/2019/11/06/error/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="175206f5468bebd9a2c33dd3c6f4c6500551465a48537b67ecb7e1531f3b76da">4630436162ade97ba2718b7d0c4b3b63d28f4f8957eafc94ae2cbc2b3019644774bec6f24125a977d2cbf54fedbe03a5f84bb5cb62ebdf5d27c316da0afebe5dbfae7d962ed22c5db0073f3f0cde7419b359e781f74aa6912011154432bc69699a0e3e24c360fc0660a82e3aa9e0830aa33d500761a4f198299a876c0f9b9787c29c5ff5a62aa4efc0eaa4c8148e9fe93df1ca021aba17ab86085ee6c7e02857f29bff5f6ef628ae6961257292504a060682c8e5c26b1c667b4e2655bd09f229ef36ac14226b2f3cb35a7a328a780b0a3ae1d2879d375e1ff33628be6e6b3c1138149d804e0a52b8780610ef406e27249ef08ef0b13e09d9184541762e1beb0dfeaef2f1f501d9f61ddbf965d3b274422262ee3640d6383959a491424c6b2c3ca336e9d8ed334675f671d2d58f3412513e46758a29522d2b9ac26b8e04b3f2d47c440c8cad78f86d47c2306b999fd2fe6464e5c5e710a00cafff72e32ae9c8d88b1515a8200cbc219772ab04f2ef76e2eaf868f00c6980c2aaca9a9c5cca9b3486e12076d259cd3e26dbaca180ea87c5d3d79bb078d1cd072e1787e39ae63632b71878aaba9634bdb47e2cf3d10d29d8391ac7e8b27c3fd49b89f5600381f8484d346230bc7a3945061f8a4d2733d1f5dc67469c8a2165c7abf7e746a3cea6f92f797b1ea0eee12080964237b0be8c9dcf6f6de7ca338428394775988e7c8dee0ea24e0e2c7a71c153761d238a129fba336a58ee056bac35dfbd8222c2fc7bea45440b68b74b95300f7ac6f31be26f97f9d0a1ed602e8d2b712deaa4513d30e59dfce0ff1a43bdb6ad97c3c35957a5b602c8b6676a9a62229ff5ab8868620b0721566656fe6d2167fa1f658379d6f5ec9c05445637478e54ef6096dc10c2dd1db3f7decb2ec7933373af61da2a5b923223dfbdbd2922fc56778fca1ff8f135f567238261b368770b555dccaf80a9d31f4ce74adb7785bbb484384e7ab57bd7f263ccf129148be6b6af87a6eafd269c5917a588783e5f3c2c15f6f8d6d31e10cf943b65da4f346c81abe8ccd21cabb1373f2c719937bf17fc5b27bebcd168358f8eedceade09045111dd94c0055d89a126f36e79eb4e08903e51f98024bb55b4c6c30236f1040346e1b326d45068f7cccd176ea20732cef6a73f8d941bce8a7bce57454f109d91f58f066d16747b6b2d4e210b8b0bddf251e0c79fc208b8520b6fe8bdab861e44b65028df415e8a7044a5b29de1190b3705d374c21aa7b2f8db6149ac429ada876b9701a1877efecb75d679e22e3a9771be7a855c29b8559e1effe6e05cae50baeb643ae29e66c5a61303377314db4a8666aee52e41234f9a7880050ec7870a0421963b65c557a3a7f3db6fce6c52887c3d5980e63d06f42d47bd8e30cf78c573800b6293c330c86e0040c47f97f32f0579db115f2433f6d3f76c0b327200aae58110abc19ad3413a3922ea5539a7dd10631cc2e77d8bc368c968c776106e345b321c9be8e3e901d31cb44b2571d729c8e81c42e3327e2f5a521a6588311a40a59388301e22b1d64bfba1a1a767a5f0d4b47306584c14937b9327e53d9ad95afdd0fa09be4dd72a6783818b054f3d0a7794abbe9323aa7e5c208c6ae69ccc8b3a4e708df6e02f4399ef295960ee3c318d861ae5c690081a32f4710788a290e31b7465aadd0888608123f661e65f76156a7e5867a96e27744f42325af9463a4e71025e6f941621af7b60482c8824aabbe56362e32d3a3929d02678734e67ea6d908470dcf5c4332da33db5833cf6af87c8a1b1156ac8d6d96cab184711338d3dee4683be307f6007ac9311f635e48ff2054cf667072ce340f778eed1a40809889ea780e4d2d293d6106f1957f2389982781d7d8800bf7f5b7375def82b497bdee113fe99831985d67abf79dd5f0feb92fc22c6afad3cca78e8d0783d93ab7e9ba7ddc375f0ddaa638314dbb4d040663b57a8c1b45a6fce4df353f371e74ad0a5553863d54d1645aa6da0dd45d80540dde0bebcbb8a566c056e5a9a48674c3e2efee6fbb571d51817684d116b709fe1163e5d2472eb80b406bb3e1e6ffbadfc4d1464e47159bb4f913ad99f32bd4d27cd7aadbc858ccede9427ad4d0966d9d52f53ff8193f309caa1d628d13b9238ac68891540a8e8dc951b16826f686917fbf81b8f6f5abf66034a0ec6097c6687f10d99bd101b3b17fb5a00a1ed4b5e73bf4cb9a6a0e70ab39cf40d1f66f0559de542a211499d88caad14653509ad7edac67be8ff0e52a89c607019905c89b38cd1500d09b7b3e16c00967d805031e6ad2ac8a1392b3380a1b996d332845a76b49651ebdd2c52e9977fa60b0e6dd44a67c9d31b2c091421aa0edd8c119db8f92f602195b61fb0b7c871ccea9467e384c76d676e83c0a74340056ce352ef67700ce739fd72f83f3dd16eec56dec3f7e096895961283ee0b4b8431db917b6e71d5e130583112b9d6b851106a0fd9b0968f965d38fac1e092b7ce75a0c3406192a153783649973a837d585a5bf3891d6143dbb99d0d16785342290e68a46d7b04790c5748feea742b82de9d3c2ed3f1b7073c0a6fa6149efe69a54100be33e7b300b222446470396ba0746e0145c4af19fa7829f6ca87c0b86eb7ea4348990a2ce57e627a65fdb8c6bf966453a02664ef600e8cc228db102e421490baf4b21a10ae351387f1c0e754edf40bc058378da0065505df03278dd7698d9add02d876be68318bdca149fbf11693ef459964a4e45db1bdc02e507be320bd613f7709772928c504a4121f71f510e88b792edff9ff1f4a14735bc72367ea39eac727f7bdf763221bc15cb8196d9f5744d64e901b4988a4a2e420712b23e5298b39530758a3ed8fb017a505d6aa5d89389a1cd68d92cb3bf11053202e5eec3ad37f9b672935af8c765343cea19ad9979520fb540b615ac3e72d4ceea29d10d2a36f6e23328512ffce7ab338643045e847f8ddad7d37727d052baed3458f2e607e331853153d3f9b6055403ae656620a9aca5e46e50d2f514614416b639e522b7e0777af578763d592a6dd80c57f51eb7f0116877c06a5cdcc2169685f125f2d48f82de4b42a13a0317dea6258d46ac90663a581e296c8e6944060ace622f488eb805ffc9bddb252891c468c5ce33b3bae8118bcbf8bd6bda004afba091ee0929a1cd3d9b41eb618caa5274714e6c66f454d8cfb6220252089749dfe6a873da1330f5f56d38473b99c527957161bbd330fe39ee629e734f304630ba87937539ee3e0291c2d88bda8cc45cf21d2acdf8339609fff6beba052bca59845482f12d5c4777bdef6ae6ff83e984d1feffce59399d9444c8bc4bc6fb367e39ec1c428fb1a43fd1d35e21ef6040e4c8bff35090277eda73b173c9eb3f6c4a44c8a84a3916801d99a5f1d5ecec604dcb20dd25918564760b6e270505e67d5ae96c90c9717b48441346486ffc43abd15bb9a3d89b36695ded1b8aae53fb5b8019b22bfbedb041be5e638a716e38d9b569bf53a912291168c19413c5cde9aeb666b7bc44b9b441b8642a846b0183fde526eac7ad107e8146d26aaaaee66c13815bd527885bcabec1096319b907abd42543d92134a825bf1e3ce84072b72fcab23431e5fbc336cc1724bba614a37c5153371b031e9975de044eeb7e9f97641ed526c7679d88a326bf9d6cdf94d079837e57f576649eea62eaf5c0018ddc9e37228338bc3e00816f9ae722b6b9632226040291921138a099a44cb7aadd0d9c53353839acd0f32fbb839ad4d6b6e5376a7967bc044771d87b058fabc754df40434543e8790dd1d9f889029b28f08b0e8663697f5cbaabae0360f1f2aff5be0b0a6641f1409dd2384ef823a5400c01161cc7ad07ffed3a47f7991c36744f1c13a45239654ab549416ceebb684e3b3c797e31f4923e2b577bd9a308db90c766efc174deea915d930c64b941f4c3ffffb38657ede2bed6a1edbef0383760e76fa1f5d0b35e701fc7a7585caf576ca354308c632c77f83a3eda5b37ee8ef70a7ba4bc00cd6b08dbc3c69dae985c1f6e5559fa94bcc45dca93776beb4908b3c5b1cb20eb644bc30f8fff74a480c53923517e92ce36b5cafe6f525691d9bb145a7867f9ccfd7042746b17070358670376aa6666e81af76a2ef3b4a6e7b7bf7c228b8979c18ccfb01e6f7f904dc280bc31f0eec8aea4960fc597a1fb9ae51822a0ca52888ba1b9c70393b8c008cdd3ae4c7f22950bd8091d34901746e34e9baced691f1c4de3562582320c2ba6f785834e047d60ec33684c823953c49e062480c9db9373e230e6264065947d68d8fbc21002a0740c52dd58c50d386da07ffdc3e3e520f85b2b6a7dee4e7898ef344f61ef43548a239656a7f9fa791fe898ad4c38625c61224d24f95447497fe74c0ecfc25ba5d1a19ba4bd7782db1ec90d6fdc7d9fe48d7127f213b2cbfd8a069ecb1ae6d2b477c21eacca6297bcf234edbaf13977ed3700d25dbfc51cb5ee935927b710a015a26371ce901875c3131edcfa91cf0aee6e53c33db18382e79c73307abe58fb8622cdd83f92d0ed8483542846d69f96fb726db60a7bb5a6033853188ce813eb692aa627225385ad0755a379919bd7724482d0169a596939d628b6d8bf23afde2105462581152cd83763468e2a138c3935f93d18cd1d870711011bc4867ea10e679ec8d2471b1f212da9b4dc8e322347ac0c4fe124a7cadb86eb0c85fddd00bb9159b3dae04b4bc80d2d1653bc9d9ee7a5f9a31cd8a805184064d644d4bc6826839586a782faaf08e49462526fe85f08a9195629a49ec93d56a7d54030920b84e0f0289b0a159056de217898ec2fc8b0a2c7ecc64d0847521bd55a563a12a50ab80d47c78539780ce666eaf7f5cd97beecab1b9005bfc4d4ff15170bfa3358141264b74840c2b91a902a1eb933d5530942ccf254b9f8dee7aa49dcba1a91f67bebab066e8f016e87e2ad581581fe8cc7e4edcf5274b1157c7798d5ba6e4d2b2fc8f9b9662a3461b5b04501216323008e64e1883e2c89d09d24bad110f00b6552e2ed8cc570df7707f0c9c6a6fb978d009192fadc78a1c5331b09a6236ac07d7a9a4406c07829cb7449de278043019ecf30dc269d585c70afdc01eb6160b99162f81901edffe4b58e8e5a567b7d4d1debc2d7c2367a5fb8582051a423057e47ffe65d004979730a86c427ac5386d5a2cc89f2ca998d02e3c437b30f7de8e7b7b48141b3c24906d1d75b3bfd9b6751d63b37964403c381d1e7085eaa4662392b7486e91b708e41daf362aee53f87f399d638ff6d0cfe0e839f0dc32e1f7538176eaa4a3d7dd483103a9af874046b77dc1cc9d37f224127bd77906eafd48caf523aeb3aac3459bb816e4d3934ead02dba3a7bc2cd958e735f9c43142e5d8728f4bf18a39e39c4ce803a85e37ba519972ed02c033643556802a2c8d87ad21db417f4c16d3a3a7c0925f757758d44ee6ba3ee76eb5ef7684d4dc25ff60e6edeff59256a5e3b3ad633d5f65a0439c830bc648e2b5cde04722b83138b3475fa9330579092a3b13fcced843e99da455d4c03a1c9c905e84c274f17a1764b0a97e6fee1d58df229cc8fdc26c5fd228858a618c68d7715d10b176363cec68d208913b3565836f2e7d58bf7dcb4b6a47cf6387928c39fbbfa87c2ea0773cb13a26bf667ebfb6c39d8ce688c0393c0b0880bbceea803e72df21942e3b07441e17410d340b816c2aa3445493e004e5cde396a53b9ad4c1524ed80b35e7faf5f4b14126a27e3eb963c3892e102accb573094c9c0e03ef14b6f17b753a9ecbb5dbf5196f1ddf86017fbcb69806af1ef4c1c395e1a1c4ec400af73d385b63f4eca23f50946e769f682394351e0486d739c8218aecd5396cd9a767696f152633b4470b6bad6b0112d22812d137afd2402d9ebe6afb7b65ab350647126ba2b359db027fcaf6e08b6991c25818703c7c780ef9ca48b4fe3125532e7b092843191662eae4f53c243c87ef3fb2a0d5e931b5954a78acf7994a1a0b777222c74541a4701c6edcfe0e37182fc555931abbe2604656b3fab323250bbb37575451390bed642d7eeed614d764dee543f3d0306128cd4e276661a08ed2bb5da84b8932f83c169d754e7489bf833094284336c11a806f45670928873ee76a06bddd462dd859a45fd5eb6152924f7b75192119f2d5558ebf1d312ef7e7d458319d1a9c8ae4ecb610b0b8f4dbda5a15ce76b0d20d571112c4b651a140f7b0e6b9bb4214c87e7c4639289133e8aae5032e2349ceff91150711daa9075ace95f830f05432315c1c2193655d65de700d6d0001992c469df3a498f3e2cd32c4049c83a1eeb002d7c009f2630a18226ce4d8f4e4e6caaf3cccf693b70401a6ed67bbd0e55705b2b0b37534b544114b18cab955b24a2beeed0dbdc8428277cc92c514a85428d8d5a5491a0ee318442e0bbf751f321a14dac22624d80dd5bc78a2383e8d72a8e78a49d65fc265c016acfccd38672c88bd464379f2d08a37f4e38037e5cb94bfede6d502b1e43c971585f60bc9f2d427805926f28aa68e0a825b6ab96eda96caa1e3b96e4fae8e66be18a7fdb382c96a7b20e48e8de3cadb7c23301a851ec9b88c8313ed9aa01d9709c6d26a85602a108272e3300ef9a95a5e68cb42d82334eb6cea5240859a0347121a2496c8da3a00f64c5a782f0a239b2e39276c8948efb98e4d1dc44148abe82c564cd68f2babbd5f725c4dd0d68b47182834a0272c9c14317b31387c4e54ebcd377bb2c880d6bb6e64c068ce38f7ee5577399488f85796914f70a2fce4f84c2ff23383619c90417514cd9e9348a045b527431e3a9a3d47bcda898f284791015d5f93f1d52688d5f45c6612445452c8a25870d231852a92cdaead3b69ad01e21695ddb655d75981d96609a8e40a15375d10e792db3e911c0a126a0d28062bd03262324c92ad9053347c71e7a7ca8ab59d55fc4d450334ee4455553efe3a9fed9898a56d529c837e3f32bcb73e999ca811a1b5cb4b742629c3121cc570bf0a8158b4fcb0af3cbf5fc7b41c90dca46bbd128fd90d6f8ef2ab35095b51f082d7ad386bc60942a9e0667fa7a6b52f728895b294736c85a900557c7c6541a3a525806c72200698a18036d6abcbef1cba46eb180a727a25471e7e5568c93c2cb03a042a9c38369c37c2100571fc7f9e4e142379e5da261f5f14b484869a660ff03224605248dfc59aff22145cab3c61ac29015799c6cbf987edfd8870354178cd2daffd570dceefab9aa715f8d62dc23703271d544e45b13b4b48cfc5615c594a095f3da9a6cbbd632b71ff90fc9bf5dfdc67fc17da59fc9ce7e9b9506370ce5e1a5312a17f4a199c8180f773f981e8e72633ab5042a30d729afa540404cd46baa3a1e144d0025a68f2a8c0b8a724dc9c35903d560bf795891a0a76127491e99af8461daa13ae69f73a06e98afd6f79ed59b2ee34bc47b13533804b61ed56e25968775e76b6de49a1386484904607a10cf5a5e0ba08f7b04b53cbfce32bc85667f9040f4bf8457c527f1e762ca20eda85822853dcd34a31ea5f940d0c457923ec6b9403186134989fa8d863935f1665b9810a45f5cf6ff67ed51be4f3b53fcb97960a731174b3240f98c46353ea7d7f717c990677d3a91d96a6be434140df9d813f9ed17dc5dc381802ee3bf4a9d91464801d34c05faae1a960def525bcba62ec57e997c4f5880a8160cc045a49d13ab7e27fd8f4b7b0ef99f78a0be75959bf82b661fcfa8b55673745ab84a3c2f3407ff9ecf160d36508889ef85a9fa34dddb4c5856bd68517945ab02358f63d30ee5277b9c8db42b52a3693c6f1d6626c1153e12ef767d11c59235d6d62388b4be3666ee34a258c1ddb126dfc108fa1a9be5f5f9a26673a8e0da1db19f46c220d391bfcc995209766bec222f16593072b0c6161ecf4eb6f2aa8c8c4fd05d1649a7a614732d95de65e227806f143c196ea4673af58233ea9ba2dbb503dfbf2e61ee06b5a681c8aa4e27265f3adae4ac3c9bfb88cda6a5cdeef1aeacd4ff601a6d0c281b5ec6d168e2cf16d913584967cfc1388164a5d080ef0451630734d342e77d3c2fad3bb3c0c90f18cc33356e53cc81f410e1e65eba8a55e17e351814b6e97370467e6a273cf2699417b9213f8c14d387c9ebf24214c091aaa9b170c4b73111174e947a207813b700f7d62843f11bdaf99ab467c1cf9fa1eaab5c925742ce0f3629f99fd864279a105e7ab42881781bca2ebb216f74c76ec457c127175508933505f437ca19ada2c5ed26d7dc2ff64f4f76cc7f9</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>web前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>移动端</tag>
        <tag>vue</tag>
        <tag>报错</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>函数的防抖与节流</title>
    <url>/2020/10/02/debounce-throttle/</url>
    <content><![CDATA[<p>节流与防抖都是控制事件触发频率的方法。应用场景有很多，输入框持续输入，将输入内容远程校验、多次触发点击事件、onScroll等等。</p>
<ul>
<li>输入框持续输入事件，用户输入内容，就从后台调接口返回相应的关键词数据，但不能输入一次就调一次后台接口，但不必然，百度搜索引擎就没有防抖</li>
<li>多次触发点击事件，之前应用场景就是轮播图按钮的节流锁</li>
<li>节流多用于防止多次触发点击事件，防抖多用于输入框持续输入<span id="more"></span>

</li>
</ul>
<h3 id="防抖Debounce：-最后一个人说了算"><a href="#防抖Debounce：-最后一个人说了算" class="headerlink" title="防抖Debounce： 最后一个人说了算"></a>防抖Debounce： 最后一个人说了算</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><p>  防抖的中心思想在于：我会等你到底。在某段时间内，不管你触发了多少次回调，我都只认最后一次。</p>
<p>对于短时间内连续触发的事件，防抖的含义就是让某个时间期限（如1000毫秒）内，事件处理函数只执行一次。</p>
<hr>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>例如：回到顶部滚动事件判定scrollTop为0时隐藏，发生滚动时显示/这样的场景懒加载</p>
<p>再者：输入款input的keyup输入事件，用户输入停止之后delay时间内才会执行回调</p>
<h4 id="手写防抖函数"><a href="#手写防抖函数" class="headerlink" title="手写防抖函数"></a>手写防抖函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个防抖函数，如果持续触发（设定延迟时间内），则永远只执行最近一次</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> timer</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer) <span class="comment">// 如果持续触发，那么就清除定时器，定时器的回调就不会执行。</span></span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                func.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">            &#125;, delay)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;滚动条位置：&#x27;</span> + scrollTop);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">window</span>.onscroll = debounce(showTop, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="节流throttle：第一个人说了算"><a href="#节流throttle：第一个人说了算" class="headerlink" title="节流throttle：第一个人说了算"></a>节流throttle：第一个人说了算</h3><h4 id="含义-1"><a href="#含义-1" class="headerlink" title="含义"></a>含义</h4><p>   有些浏览器事件可以在短时间内快速触发多次，比如调整窗口大小或向下滚动页面。例如，监听页面窗口滚动事件，并且用户持续快速地向下滚动页面，那么滚动事件可能在 3 秒内触发数千次，这可能会导致一些严重的性能问题。</p>
<h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><p>  构建应用程序，滚动、窗口大小调整或按下键等事件必然关系到 防抖(Debouncing) 和 函数节流（Throttling）来提升页面速度和性能。两者本质都是以闭包的形式存在。通过对事件对应的回调函数进行包裹、以自由变量的形式缓存时间信息，最后用 setTimeout 来控制事件的触发频率。</p>
<ul>
<li>throttle 的中心思想在于：在某段时间内，不管你触发了多少次回调，我都只认第一次，并在计时结束时给予响应。<br>节流的意思是让函数有节制地执行，而不是毫无节制的触发一次就执行一次。就是在一段时间内，只执行一次。</li>
<li>持续触发并不会执行多次（防抖是触发会执行，但限定时间内上一次会被取消）</li>
<li>到一定时间再去执行（防抖是持续触发只执行最近的一次，节流就是本质上指定时间内只触发一次）</li>
<li>所以就需要设置一个开关来控制(之前做的轮播图的左右点击按钮做了一个这个节流锁，就是这个应用场景)<h4 id="定义节流函数"><a href="#定义节流函数" class="headerlink" title="定义节流函数"></a>定义节流函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> run = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!run) &#123;</span><br><span class="line">          <span class="keyword">return</span>  <span class="comment">// 如果开关关闭了，那就直接不执行下边的代码</span></span><br><span class="line">        &#125;</span><br><span class="line">        run = <span class="literal">false</span> <span class="comment">// 持续触发的话，run一直是false，就会停在上边的判断那里</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          func.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">          run = <span class="literal">true</span> <span class="comment">// 定时器到时间之后，会把开关打开，我们的函数就会被执行</span></span><br><span class="line">        &#125;, delay)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">window</span>.onscroll = debounce(showTop, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<!-- 方式2 -->
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> timer;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timer) <span class="keyword">return</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          func.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">          timer = <span class="literal">null</span></span><br><span class="line">        &#125;, delay)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>web前端</category>
        <category>JS</category>
        <category>面试</category>
        <category>初级</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next搭建博客遇到的问题</title>
    <url>/2019/12/26/hello-world/</url>
    <content><![CDATA[<hr>
<p>最近开始基于hexo和next搭建个人博客，中途遇到了一堆的bug以及相关的优化问题，想写这篇文章记录下。</p>
<h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p>在编辑 站点配置文件 时， 将 language 按照hexo 的官方文档设置语言,但不生效。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span> <span class="string">//</span> <span class="string">这里设置语言</span> <span class="string">简体中文</span></span><br></pre></td></tr></table></figure>
<p>查看hexo-theme-next/languages/目录下是否有zh-Hans.yml 文件.一般是有zh-CN.yml ,所以要把zh-CN.yml文件改成名字为zh-Hans.yml就可以了<br>————————————————</p>
<span id="more"></span>
<h3 id="设置标题-作者-描述"><a href="#设置标题-作者-描述" class="headerlink" title="设置标题/作者/描述"></a>设置标题/作者/描述</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">草原森林</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;一片两片三四片，五片六片七八片，鸡鸭鹅，牛羊猪&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;现在开始种树啦&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">一棵树</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>按照官方文档设置，但均不生效，在命令行输入以下命令就解决了这个问题，因为是静态文件，所以可能是由于缓存的原因</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean //清理静态文件</span><br><span class="line">hexo g //生成静态文件</span><br><span class="line">hexo d //部署</span><br></pre></td></tr></table></figure>

<h3 id="部署时报错"><a href="#部署时报错" class="headerlink" title="部署时报错"></a>部署时报错</h3><p>在命令行工具中输入hexo d进行部署时报以下错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">  err: <span class="built_in">Error</span>: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (D:\sblog\songssBlog\node_modules\hexo-util\lib\spawn.js:<span class="number">51</span>:<span class="number">21</span>)</span><br><span class="line">      at ChildProcess.emit (events.js:<span class="number">315</span>:<span class="number">20</span>)</span><br><span class="line">      at ChildProcess.cp.emit (D:\sblog\songssBlog\node_modules\cross-spawn\lib\enoent.js:<span class="number">34</span>:<span class="number">29</span>)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:<span class="number">277</span>:<span class="number">12</span>) &#123;</span><br><span class="line">    code: <span class="number">128</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>解决办法：部署时hexo clean一次</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="发布新文章"><a href="#发布新文章" class="headerlink" title="发布新文章"></a>发布新文章</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h4 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<h4 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate  或者 hexo s 常用参数：-p（--port）重设端口</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h4 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy 可简写为hexo d，用于将网站部署到服务器上。</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h4 id="发布文章之后的操作"><a href="#发布文章之后的操作" class="headerlink" title="发布文章之后的操作"></a>发布文章之后的操作</h4><p>一般发布文章或者修改博客后需要这些操作：清除缓存&gt;生成静态文件&gt;启动服务器，测试没问题后再部署。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>blog搭建</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端布局及页面自适应布局（rem布局）</title>
    <url>/2021/02/27/flexible/</url>
    <content><![CDATA[<p>常见的页面布局方式有</p>
<ul>
<li>静态布局  px布局 即传统web布局，网页上所有元素尺寸一律用px作为单位</li>
<li>流式布局（Liquid Layout） 主要的划分区域的尺寸使用百分数（搭配min-*、max-*属性使用）以京东移动端为代表</li>
<li>自适应布局（Adaptive Layout） 即创建多个静态布局，每个静态布局对应一个屏幕分辨率范围</li>
<li>响应式布局（Responsive Layout） 检测窗口大小利用bootstrap布局</li>
<li>弹性布局（rem/em布局） css3 rem<span id="more"></span></li>
</ul>
<p>1.如果只做pc端，那么静态布局（定宽度）是最好的选择；</p>
<p>2.如果做移动端，且设计对高度和元素间距要求不高，那么弹性布局（rem+js）是最好的选择，一份css+一份js调节font-size搞定；</p>
<p>3.如果pc，移动要兼容，而且要求很高那么响应式布局还是最好的选择，前提是设计根据不同的高宽做不同的设计，响应式根据媒体查询做不同的布局。</p>
<h4 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h4><p>rem (root em)是一个相对单位，是相对于html元素的字体大小（em是父元素字体大小）。比如，根元素（html）font-size=12px; 则1rem就是12px。</p>
<h4 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h4><h4 id="media"><a href="#media" class="headerlink" title="@media"></a>@media</h4><h4 id="vh"><a href="#vh" class="headerlink" title="vh"></a>vh</h4><h4 id="dpr"><a href="#dpr" class="headerlink" title="dpr"></a>dpr</h4><h4 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h4><h4 id="移动端适配方案"><a href="#移动端适配方案" class="headerlink" title="移动端适配方案"></a>移动端适配方案</h4><h5 id="手机淘宝适配方案"><a href="#手机淘宝适配方案" class="headerlink" title="手机淘宝适配方案"></a>手机淘宝适配方案</h5>]]></content>
      <categories>
        <category>web前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>移动端</tag>
        <tag>rem</tag>
        <tag>flexible</tag>
      </tags>
  </entry>
  <entry>
    <title>vue移动端项目中两种方式实现页面自适应布局</title>
    <url>/2021/02/27/media-rem/</url>
    <content><![CDATA[<p>方案一：手机淘宝移动端适配方案，引入flexible.js文件<br>src =&gt; assets =&gt; flexible.js<br>css样式时应计算为相应rem 利用vsCode插件</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">flexible</span>(<span class="params"><span class="built_in">window</span>, <span class="built_in">document</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement <span class="comment">//获取html标签</span></span><br><span class="line">  <span class="comment">// 获取当前设备的物理像素比</span></span><br><span class="line">  <span class="keyword">var</span> dpr = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(dpr)</span><br><span class="line">  <span class="comment">// adjust body font size</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setBodyFontSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.body) &#123;</span><br><span class="line">      <span class="built_in">document</span>.body.style.fontSize = (<span class="number">12</span> * dpr) + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, setBodyFontSize)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  setBodyFontSize();</span><br><span class="line">  <span class="comment">// console.log(document.body.style.fontSize)</span></span><br><span class="line">  <span class="comment">// set 1rem = viewWidth / 10</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setRemUnit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rem = docEl.clientWidth / <span class="number">20</span></span><br><span class="line">    docEl.style.fontSize = rem + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">console</span>.log(docEl.clientWidth)</span><br><span class="line">  setRemUnit()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// reset rem unit on page resize</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, setRemUnit)</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;pageshow&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">      setRemUnit()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// detect 0.5px supports</span></span><br><span class="line">  <span class="keyword">if</span> (dpr &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> fakeBody = <span class="built_in">document</span>.createElement(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> testElement = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    testElement.style.border = <span class="string">&#x27;.5px solid transparent&#x27;</span></span><br><span class="line">    fakeBody.appendChild(testElement)</span><br><span class="line">    docEl.appendChild(fakeBody)</span><br><span class="line">    <span class="keyword">if</span> (testElement.offsetHeight === <span class="number">1</span>) &#123;</span><br><span class="line">      docEl.classList.add(<span class="string">&#x27;hairlines&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    docEl.removeChild(fakeBody)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>))</span><br></pre></td></tr></table></figure>
<p>方案二：自定义媒体查询,根据常见屏幕尺寸设置<br>src =&gt; styles =&gt; flexible.scss<br>在main.scss中引入,这种方案因为有同时引入初始化样式normalize.scss所有会不生效</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./flexible.scss&quot;</span>;</span><br><span class="line">// <span class="keyword">@import</span> <span class="string">&quot;./normalize.scss&quot;</span>;  //页面初始化样式</span><br></pre></td></tr></table></figure>
<p>flexible.scss文件内容</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义的份数为15等份，每一份为html字体的大小，为1rem</span></span><br><span class="line"><span class="comment">//  屏幕尺寸不同定义不同的1rem就是不同的html字体大小</span></span><br><span class="line"><span class="comment">/* 这里面设置常见的屏幕尺寸，修改里面html文字大小 */</span></span><br><span class="line"><span class="comment">/* 不能无限制的大，所以设置一个固定的html字体50 */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="comment">/* 写在最上面，因为样式有层叠性 */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 15等分不变，所以定义一个变量</span></span><br><span class="line"><span class="variable">$no</span>: <span class="number">15</span>;</span><br><span class="line"><span class="comment">//  屏幕为320px时 定义html字体大小为320/15</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">320px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">320px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 360</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">360px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">360px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  375 iphone678</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">370px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">375px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 384</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">384px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">384px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  400</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">400px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">400px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  414</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">414px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">414px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  424</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">424px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">424px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  480</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">480px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  540</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">540px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">540px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  720</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">720px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">720px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  750</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">750px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">750px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
        <category>CSS</category>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
        <tag>vue</tag>
        <tag>rem</tag>
        <tag>flexible</tag>
        <tag>CSS</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli快速构建项目</title>
    <url>/2021/02/27/program/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>web前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>移动端</tag>
        <tag>vue</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中路由参数传递的几种方式</title>
    <url>/2021/03/06/router/</url>
    <content><![CDATA[<blockquote>
<p>路由传参，一般情况下为详情页的跳转，需要对应的id获取接口查询到的相应的信息，例如编辑某个商品的详情页，编辑某个文章的详情页等等都会用到，vue中有几种方式实现</p>
</blockquote>
 <span id="more"></span>

<h3 id="第一种-明文传参-query属性传参"><a href="#第一种-明文传参-query属性传参" class="headerlink" title="第一种 明文传参 query属性传参"></a>第一种 明文传参 query属性传参</h3><blockquote>
<p>这种方式会在URL路径中显示传递的参数，以❓拼接键值对(key=val&amp;key=val)的形式传参<br>这种方式传参，<strong>页面刷新参数不会消失</strong>，但是参数是公开的,<strong>路径为/film?filmId=3355</strong></p>
</blockquote>
<p><strong>做法</strong></p>
<ul>
<li><p>首先需要在router/index.js路由中设置路由信息,以电影详情页为例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/film&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;film&quot;</span>,</span><br><span class="line">    <span class="comment">// hidden: true,</span></span><br><span class="line">    meta: &#123;</span><br><span class="line">      <span class="comment">//自定义属性</span></span><br><span class="line">      title: <span class="string">&quot;详情页&quot;</span>,</span><br><span class="line">      icon: <span class="string">&quot;film&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/films/detail&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>传参数时，两种方式，一是在html页面中通过router-link携带参数<strong>query</strong>跳转<br>{<br> name:路由名称film,<br> query:{filmId: 3355}<br>}</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:xxx,query:&#123;filmId: 3355&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>另一种通过js中通过this.$router.push进行携带<strong>query</strong>参数跳转</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">   name: <span class="string">`film`</span>,</span><br><span class="line">   query: &#123;</span><br><span class="line">     filmId: <span class="number">3355</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>获取参数</strong>，这种方式的参数储存在this.$route.query属性中，打点获取即可</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$route.query.filmId</span><br></pre></td></tr></table></figure>

<h3 id="第二种-密文传参-params属性传参"><a href="#第二种-密文传参-params属性传参" class="headerlink" title="第二种 密文传参 params属性传参"></a>第二种 密文传参 params属性传参</h3><blockquote>
<p>这种方式URL不会显示传递的参数，<strong>页面刷新参数就会消失</strong>，可以结合本地存储技术保存参数，参考第四种方式，但大材小用,<strong>路径为/film</strong></p>
</blockquote>
</li>
</ul>
<p> <strong>做法</strong></p>
<ul>
<li>同样需要在router/index.js路由中设置路由信息,与query传参路由设置相同，不再赘述</li>
</ul>
<blockquote>
<p>传参时，同样两种方式，一是在html页面中通过router-link携带参数<strong>params</strong>跳转，二是js中通过this.$router.push进行携带<strong>params</strong>参数跳转</p>
</blockquote>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;film&#x27;,params:&#123;filmId: 3355&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">   name: <span class="string">`film`</span>,</span><br><span class="line">   params: &#123;</span><br><span class="line">    filmId: <span class="number">3355</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>获取参数</strong>，这种方式的参数储存在<strong>this.$route.params</strong>属性中，打点获取即可<br> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$route.params.filmId</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="第三种-路由-冒号形式传递参数"><a href="#第三种-路由-冒号形式传递参数" class="headerlink" title="第三种 路由:冒号形式传递参数"></a>第三种 路由:冒号形式传递参数</h3><blockquote>
<p>在路由中路径path配置:id,这种传递方式<strong>页面刷新参数不会消失</strong>，<strong>url路径为/film/3355</strong></p>
</blockquote>
<p> <strong>做法</strong></p>
<ul>
<li><p>首先需要在router/index.js路由中设置路由信息,以电影详情页为例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/film/:filmId&quot;</span>, <span class="comment">//配置路径参数 如果多个参数则&quot;/film/:filmId/:data&quot;</span></span><br><span class="line">    name: <span class="string">&quot;film&quot;</span>,</span><br><span class="line">    <span class="comment">// hidden: true,</span></span><br><span class="line">    meta: &#123;</span><br><span class="line">      <span class="comment">//自定义属性</span></span><br><span class="line">      title: <span class="string">&quot;详情页&quot;</span>,</span><br><span class="line">      icon: <span class="string">&quot;film&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/films/detail&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>js中通过this.$router.push由path拼接路径参数进行跳转跳转</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="string">`/film/<span class="subst">$&#123;data.id&#125;</span>`</span>&#125;) <span class="comment">//  &quot;/film/335&quot;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p><strong>获取参数</strong>，这种方式的参数同样储存在<strong>this.$route.params</strong>属性中，打点获取即可</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$route.params.filmId</span><br></pre></td></tr></table></figure>

<h3 id="第四种-vuex结合HTML5本地存储解决params刷新参数消失问题（第二种-）"><a href="#第四种-vuex结合HTML5本地存储解决params刷新参数消失问题（第二种-）" class="headerlink" title="第四种 vuex结合HTML5本地存储解决params刷新参数消失问题（第二种[]）"></a>第四种 vuex结合HTML5本地存储解决params刷新参数消失问题（第二种[]）</h3>]]></content>
      <categories>
        <category>web前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>随便写点什么</title>
    <url>/2021/02/26/%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<p>还差评论功能</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
  </entry>
</search>
